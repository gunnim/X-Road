/*
 * The MIT License
 * Copyright (c) 2019- Nordic Institute for Interoperability Solutions (NIIS)
 * Copyright (c) 2018 Estonian Information System Authority (RIA),
 * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)
 * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
syntax = "proto3";

import "google/protobuf/timestamp.proto";

package ee.ria.xroad.proxy.monitoring;

option java_multiple_files = true;

service MonitorService {
  rpc success(SuccessfulMessage) returns (Void) {}
  rpc failure(FaultInfo) returns (Void) {}
  rpc serverProxyFailed(ServerProxyFailed) returns (Void) {}
}

message Void {
}

message SuccessfulMessage {
  optional MessageInfoProto message = 1;
  int64 date_start_time = 2;
  int64 date_end_time = 3;
}

message FaultInfo {
  optional MessageInfoProto message = 1;
  optional string faultCode = 2;
  optional string faultMessage = 3;
}

message ServerProxyFailed {
  optional MessageInfoProto message = 1;
}

message MessageInfoProto {
  Origin origin = 1;
  ClientIdProto client = 2;
  ServiceIdProto service = 3;
  optional string user_id = 4;
  optional string query_id = 5;
}

enum Origin {
  CLIENT_PROXY = 0;
  SERVER_PROXY = 1;
}

message ServiceIdProto {
  string member_class = 1;
  string member_code = 2;
  optional string subsystem_code = 3;
  string service_code = 4;
  optional string service_version = 5;

  string xroad_instance = 6;
}

message ClientIdProto {
  string member_class = 1;
  string member_code = 2;
  optional string subsystem_code = 3;
  string xroad_instance = 4;
  XRoadObjectType object_type = 5;
}

enum XRoadObjectType {
  XROAD_OBJECT_TYPE_UNSPECIFIED = 0;
  SERVER = 1;
  SERVICE = 2;
  MEMBER = 3;
  SUBSYSTEM = 4;
  GLOBALGROUP = 5;
  LOCALGROUP = 6 [deprecated = true]; // Deprecated
}
